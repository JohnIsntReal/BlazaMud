@page "/fileupload"
@rendermode InteractiveServer

<MudText Typo="Typo.h3" GutterBottom="true">I eat files.</MudText>

<MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Upload Files
        </MudButton>
    </ActivatorContent>
</MudFileUpload>
<div>File name: @FileName</div>


<MudSimpleTable Style="overflow-x: auto;">
    <thead>
        <tr>
            <th>Key</th>
            <th>Calls</th>
            <th>Reader</th>
        </tr>
    </thead>
    <tbody>
        @foreach(KeyValuePair<string ,  List<ReaderEvent>> kvp in readerDictionary)
        {
            <tr>
                <td>@kvp.Key</td>
                <td>@kvp.Value.Count</td>
                <td>@kvp.Value.First().GetName()</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code
{
    IList<IBrowserFile> _files = new List<IBrowserFile>();

    public string FileName { get; set; } = "";
    public long FileSize { get; set; }
    public string FileType { get; set; } = "";
    public string ErrorMessage { get; set; } = "";

    public int uniqueReaderCount;

    public DateTimeOffset LastModified { get; set; }
    private List<ReaderEvent> listReader = new List<ReaderEvent>();

    const int MAX_FILESIZE = 5000 * 1024; // 2 MB
    private void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        
        FileName = file.Name;
        try
            {
                var fileStream = file.OpenReadStream(MAX_FILESIZE);


                var randomFile = Path.GetTempFileName();
                var extension = Path.GetExtension(file.Name);
                var targetFilePath = Path.ChangeExtension(randomFile, extension);

                var destinationStream = new FileStream(FileName, FileMode.Create);
                fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();

                StreamReader streamReader = new StreamReader(FileName);

                List<string[]> lineList = new List<string[]>();
                    
                string line = streamReader.ReadLine();
                line = streamReader.ReadLine(); //skips first line
                while(line != null)
                {
                    lineList.Add(line.Split(","));
                    line = streamReader.ReadLine();                   
                }
                foreach(string[] r in lineList)
                    {
                        if(r.Length >= 6)
                        {
                            uniqueReaderCount++;    
                            ReaderEvent a = new ReaderEvent(r[0],r[1],r[2],r[3],r[4],r[5]);
                            listReader.Add(a);
                        }
                    }
                foreach(ReaderEvent _reader in listReader)
                {
                    CreateDictionary(_reader);
                }
            }
            
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
    }

    private Dictionary<string,  List<ReaderEvent>> readerDictionary = new Dictionary<string, List<ReaderEvent> >();

    private void CreateDictionary(ReaderEvent r)
    {
        List<ReaderEvent> runs = new List<ReaderEvent>();
        try
        {
            readerDictionary.Add(r.DEVID + r.MACHINE, runs);
            readerDictionary[r.DEVID+r.MACHINE].Add(r);
        }
        catch
        {
            Console.WriteLine("repeated");
            readerDictionary[r.DEVID+r.MACHINE].Add(r);
        }
    }
    
    class ReaderEvent
    {
        private string EVENT_TIME;
        private string LOCATION;
        private string READERDESCRIPTION;
        public string IDHASH;
        public string DEVID;
        public string MACHINE;

        public ReaderEvent()
        {
            EVENT_TIME = "";
            LOCATION = "";
            READERDESCRIPTION = "";
            IDHASH = "";
            DEVID = "";
            MACHINE = "";
        }
        public ReaderEvent(string time, string location, string description, string id, string devId, string machine)
        {
            EVENT_TIME = time;
            LOCATION = location;
            READERDESCRIPTION = description;
            IDHASH = id;
            DEVID = devId;
            MACHINE = machine;
        }
        public override string ToString()
        {
            return $"{EVENT_TIME} , {LOCATION} , {READERDESCRIPTION}, {IDHASH}, {DEVID}, {MACHINE}";
        }

        public string GetName()
        {
            return $"{LOCATION} , {READERDESCRIPTION}";
        }
        
    }
}
